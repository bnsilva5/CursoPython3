Zen de Python
Hace mucho tiempo el entusiasta de Python Tim Peters plasmó los principios de diseño por los que guiarse al escribir en Python según Guido van Rossum, el creador del lenguaje. Estos se pueden consultar desde el propio intérprete escribiendo:

import this

Os dejo la tradución y la versión original abajo:

Hermoso es mejor que feo.

Explícito es mejor que implícito.

Simple es mejor que complejo.

Complejo es mejor que complicado.

Plano es mejor que anidado.

Disperso es mejor que denso.

La legibilidad cuenta.

Los casos especiales no son suficientemente especiales como para romper las reglas.

Aunque lo pragmático gana a la pureza.

Los errores nunca deberían dejarse pasar silenciosamente.

A menos que se silencien explícitamente.

Cuando te enfrentes a la ambigüedad, rechaza la tentación de adivinar.

Debería haber una — y preferiblemente sólo una — manera obvia de hacerlo.

Aunque puede que no sea obvia a primera vista a menos que seas holandés. (NT: Guido van Rossum es holandés)

Ahora es mejor que nunca.

Aunque muchas veces nunca es mejor que *ahora mismo*.

Si la implementación es difícil de explicar, es una mala idea.

Si la implementación es sencilla de explicar, puede que sea una buena idea.

Los espacios de nombres son una gran idea — ¡tengamos más de esas!


Versión original:

Beautiful is better than ugly.

Explicit is better than implicit.

Simple is better than complex.

Complex is better than complicated.

Flat is better than nested.

Sparse is better than dense.

Readability counts.

Special cases aren't special enough to break the rules.

Although practicality beats purity.

Errors should never pass silently.

Unless explicitly silenced.

In the face of ambiguity, refuse the temptation to guess.

There should be one-- and preferably only one --obvious way to do it.

Although that way may not be obvious at first unless you're Dutch.

Now is better than never.

Although never is often better than *right* now.

If the implementation is hard to explain, it's a bad idea.

If the implementation is easy to explain, it may be a good idea.

Namespaces are one honking great idea -- let's do more of those



